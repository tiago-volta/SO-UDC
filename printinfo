static void listDirectoryRecursivelyReverse(char *dirName, bool showHidden, bool showLong, bool showLink, bool showAccessTime){
    DIR *dir;
    struct dirent *entry;
    char fullPath[LENGTH_MAX_INPUT];
    struct stat fileData;
    //se abre el directorio especidifcado por dirName
    dir = opendir(dirName);
    if (dir == NULL) {
        fprintf(stderr, "Error al intentar acceder a %s: %s", dirName,strerror(errno));  // Mensaje de error
        return;
    }

    // Verifica si no se deben mostrar enlaces simb贸licos y si dirName es un enlace simb贸lico
    if (!showLink && lstat(dirName, &fileData) == 0 && S_ISLNK(fileData.st_mode)) {
        closedir(dir);
        return;
    } else {
        printf("************%s\n", dirName);
    }


    while ((entry = readdir(dir)) != NULL) {
        if ((!showHidden && entry->d_name[0] == '.') || strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {       //No se les aplica ya que al leer este tipo de directorios e intentar acceder a los subdirectorios pueden provocar una recursi贸n infinita al seguir llamando a la misma carpeta o a sus padres.
            continue;  // Omitir archivos ocultos
        }
        snprintf(fullPath, LENGTH_MAX_INPUT, "%s/%s", dirName, entry->d_name); //ruta completa del archivo
        if (stat(fullPath, &fileData) == -1) {
            fprintf(stderr, "Error al intentar acceder a %s: %s", entry->d_name,strerror(errno));  // Mensaje de error
            continue;
        }
        if (S_ISDIR(fileData.st_mode)) {
            listDirectoryRecursivelyReverse(fullPath, showHidden, showLong, showLink, showAccessTime);
        }
    }

    // Ahora que hemos recorrido recursivamente, volvemos a listar el contenido del directorio actual
    rewinddir(dir);  // Volver al inicio del directorio para la segunda pasada (evitar cerrar/abrir)

    
    while ((entry = readdir(dir)) != NULL) {
        if (GetFileData(showHidden, &fileData, dirName , entry->d_name,fullPath)) {
            print_file_info(entry->d_name, &fileData, showLong,showLink,showAccessTime);  // Usar la funci贸n auxiliar
        }
    }
    closedir(dir);  // Cerrar el directorio
}
